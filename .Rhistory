# acantho
data3 <- data2 %>% filter(species == 'acantho')
data3c <- data3 %>% filter(treatment == "control")
data3t <- data3 %>% filter(treatment == "CO2")
test1 <- t.test(data3c$activity, data3t$activity)
print(test1)
#ambon
data4 <- data2 %>% filter(species == 'ambon')
data4c <- data4 %>% filter(treatment == "control")
data4t <- data4 %>% filter(treatment == "CO2")
test2 <- t.test(data4c$activity, data4t$activity)
print(test2)
#chromis
data5 <- data2 %>% filter(species == 'chromis')
data5c <- data5 %>% filter(treatment == "control")
data5t <- data5 %>% filter(treatment == "CO2")
test3 <- t.test(data5c$activity, data5t$activity)
print(test3)
#humbug
data6 <- data2 %>% filter(species == 'humbug')
data6c <- data6 %>% filter(treatment == "control")
data6t <- data6 %>% filter(treatment == "CO2")
test4 <- t.test(data6c$activity, data6t$activity)
print(test4)
#lemon
data7 <- data2 %>% filter(species == 'lemon')
data7c <- data7 %>% filter(treatment == "control")
data7t <- data7 %>% filter(treatment == "CO2")
test5 <- t.test(data7c$activity, data7t$activity)
print(test5)
#whitedams
data8 <- data2 %>% filter(species == 'whitedams')
data8c <- data8%>% filter(treatment == "control")
data8t <- data8 %>% filter(treatment == "CO2")
test6 <- t.test(data8c$activity, data8t$activity)
print(test6)
View(test5)
Sys.setenv(LANG = "en_US")
View(data2)
View(data3)
View(data6)
View(data7)
# Add your code here.
permutate_lemon <- data7
permutate_lemon$treatment <- permuted_lemon$treatment[sample(length(lemon$treatment))]
# Add your code here.
permutate_lemon <- data7
permutate_lemon$treatment <- permutate_lemon$treatment[sample(length(lemon$treatment))]
# Add your code here.
permutate_lemon <- data7
permutate_lemon$treatment <- permutate_lemon$treatment[sample(length(data7$treatment))]
head(permutate_lemon)
ggplot(permutate_lemon, aes(x = treatment, y = activity, color = treatment)) + geom_boxplot()
## generate more permutate and visualize
### Build a tibble to store the data, beginning with the actual data
perm_tibble <- data7 %>% select(treatment, activity)
### Set the number of permutations, here 24 for better viewing
n_reps <- 24
### Grow the tibble column by column with permuted values
for (i in 1:n_reps)
{
# Name the permutation reps P1,P2,...
new_name <- paste("P",i,sep="")
# Generate a permuted column of body mass values. Note that this is equivalent     to permuting the species labels; however, permuting values makes the plotting     easier
new_col <- tibble(data7$activity[sample(length(data7$treatment))])
# Assign the new column its name
colnames(new_col) <- new_name
# Attach the permuted column to the end of the growing tibble
perm_tibble <- cbind(perm_tibble,new_col)
}
### Record the order of the column names for later use as plot order
factor_levels <- colnames(perm_tibble)[2:(n_reps+2)]
### Pivot the tibble built above into long form
plot_tibble <- pivot_longer(perm_tibble,cols=2:(n_reps+2),names_to = c("rep"))
### Turn the rep column into a factor, using the order stored above
plot_tibble$rep <- factor(plot_tibble$rep,levels=factor_levels)
### Plot a matrix of box plots, beginning with the real data, followed from left to right with P1,P2,etc. Set the number of columns in the plot matrix to 5 for viewing. Remove the x-axis annotations.
ggplot(plot_tibble,aes(x=treatment,y=activity,colour=treatment))+geom_boxplot()+facet_wrap(~rep,ncol=5)+theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())
View(plot_tibble)
ggplot(plot_tibble,aes(x=treatment,y=value,colour=treatment))+geom_boxplot()+facet_wrap(~rep,ncol=5)+theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())
View(test6)
## generate t-test
### loop how many times?
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(0,n_reps)
### run our loop and set in loop
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(treatment = treatment[sample(row_number())])
# play around the t-test
permuted_t_test_results <- t.test(permuted_group_data$value[which(permuted_data$control=="control")],permuted_group_data$value[which(permuted_data$ID=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
## generate t-test
### loop how many times?
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(0,n_reps)
### run our loop and set in loop
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(treatment = treatment[sample(row_number())])
# play around the t-test
permuted_t_test_results <- t.test(permuted_data$value[which(permuted_data$control=="control")],permuted_data$value[which(permuted_data$ID=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(treatment = treatment[sample(row_number())])
# play around the t-test
permuted_t_test_results <- t.test(permuted_data$value[which(permuted_data$control=="control")],permuted_data$value[which(permuted_data$ID=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permutate_lemon$treatment[sample(length(data7$treatment))]
# play around the t-test
permuted_t_test_results <- t.test(permuted_data$value[which(permuted_data$control=="control")],permuted_data$value[which(permuted_data$ID=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
### loop how many times?
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(0,n_reps)
### run our loop and set in loop
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permutate_lemon$treatment[sample(length(data7$treatment))]
# play around the t-test
permuted_t_test_results <- t.test(permuted_data$value[which(permuted_data$control=="control")],permuted_data$value[which(permuted_data$ID=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
## generate t-test
### loop how many times?
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(0,n_reps)
### run our loop and set in loop
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- permutate_lemon$treatment[sample(length(data7$treatment))]
# play around the t-test
permuted_t_test_results <- t.test(permuted_data$value[which(permuted_data$control=="control")],permuted_data$value[which(permuted_data$ID=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(0,n_reps)
### run our loop and set in loop
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- permutate_lemon$treatment[sample(length(data7$treatment))]
# play around the t-test
permuted_t_test_results <- t.test(permuted_data$activiy[which(permuted_data$treatment=="control")],permuted_data$activity[which(permuted_data$treatment=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
View(permutate_lemon)
### loop how many times?
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(0,n_reps)
### run our loop and set in loop
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- permutate_lemon$treatment[sample(length(data7$treatment))]
# play around the t-test
permuted_t_test_results <- t.test(permuted_data$activiy[which(permuted_data$treatment=="control")],permuted_data$activity[which(permuted_data$treatment=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
argument is not numeric or logical: returning NAError in var(x) : 'x' is NULL
permuted_data$activiy[which(permuted_data$treatment=="control")
permuted_data$activiy[which(permuted_data$treatment=="control")
View(permutate_lemon)
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- permutate_lemon$treatment[sample(length(data7$treatment))]
# play around the t-test
permuted_t_test_results <- t.test(permuted_data$activiy[which(permuted_data$treatment=="control")],permuted_data$activity[which(permuted_data$treatment=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permutate_lemon$treatment <- permutate_lemon$treatment[sample(length(data7$treatment))]
# play around the t-test
permuted_t_test_results <- t.test(permuted_data$activiy[which(permuted_data$treatment=="control")],permuted_data$activity[which(permuted_data$treatment=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
## generate t-test
### loop how many times?
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(0,n_reps)
### run our loop and set in loop
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permutate_lemon$treatment <- permutate_lemon$treatment[sample(length(data7$treatment))]
# play around the t-test
permuted_t_test_results <- t.test(permutate_lemon$activiy[which(permutate_lemon$treatment=="control")],permutate_lemon$activity[which(permutate_lemon$treatment=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(0,n_reps)
### run our loop and set in loop
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(permutate_lemon$treatment[sample(length(data7$treatment))])
head(permutate_lemon)
# play around the t-test
permuted_t_test_results <- t.test(permutate_lemon$activiy[which(permutate_lemon$treatment=="control")],permutate_lemon$activity[which(permutate_lemon$treatment=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
permuted_data <- data7 %>% mutate(treatment[sample(row_number())])
head(permutate_lemon)
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(treatment[sample(row_number())])
head(permutate_lemon)
# play around the t-test
permuted_t_test_results <- t.test(permutate_lemon$activiy[which(permutate_lemon$treatment=="control")],permutate_lemon$activity[which(permutate_lemon$treatment=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
# generate t-test
### loop how many times?
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(1,n_reps)
### run our loop and set in loop
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(treatment[sample(row_number())])
head(permutate_lemon)
# play around the t-test
permuted_t_test_results <- t.test(permutate_lemon$activiy[which(permutate_lemon$treatment=="control")],permutate_lemon$activity[which(permutate_lemon$treatment=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(1,n_reps)
### run our loop and set in loop
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(treatment = treatment[sample(row_number())])
head(permutate_lemon)
# play around the t-test
permuted_t_test_results <- t.test(permutate_lemon$activiy[which(permutate_lemon$treatment=="control")],permutate_lemon$activity[which(permutate_lemon$treatment=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
View(permuted_data)
## generate t-test
### loop how many times?
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(1,n_reps)
### run our loop and set in loop
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(treatment = treatment[sample(length(data7$treatment)])
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(1,n_reps)
### run our loop and set in loop
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(treatment = treatment[sample(length(data7$treatment))])
# play around the t-test
permuted_t_test_results <- t.test(permutate_lemon$activiy[which(permutate_lemon$treatment=="control")],permutate_lemon$activity[which(permutate_lemon$treatment=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
## generate t-test
### loop how many times?
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(1,n_reps)
### run our loop and set in loop
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(treatment = treatment[sample(length(data7$treatment))])
# play around the t-test
permuted_t_test_results <- t.test(permutate_lemon$activiy[which(permutate_lemon$treatment=="control")],permutate_lemon$activity[which(permutate_lemon$treatment=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
### loop how many times?
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(1,n_reps)
### run our loop and set in loop
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(treatment = treatment[sample(row_number())])
# play around the t-test
permuted_t_test_results <- t.test(permutate_data$activiy[which(permutate_data$treatment=="control")],permutate_data$activity[which(permutate_data$treatment=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(1,n_reps)
### run our loop and set in loop
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(treatment = treatment[sample(row_number())])
# play around the t-test
permuted_t_test_results <- t.test(permuted_data$activiy[which(permuted_data$treatment=="control")],permuted_data$activity[which(permuted_data$treatment=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
View(permuted_data)
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(0,n_reps)
### run our loop and set in loop
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(treatment = treatment[sample(row_number())])
# play around the t-test
permuted_t_test_results <- t.test(permuted_data$activiy[which(permuted_data$treatment=="control")],permuted_data$activity[which(permuted_data$treatment=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(treatment = treatment[sample(row_number())])
control <- permutated_data %>% select(treatment, activity) %>% filter(treatment == "control")
CO2 <- permutated_data %>% select(treatment, activity) %>% filter(treatment == "CO2")
# play around the t-test
permuted_t_test_results <- t.test(control, CO2],var.equal=T)
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(treatment = treatment[sample(row_number())])
control <- permutated_data %>% select(treatment, activity) %>% filter(treatment == "control")
CO2 <- permutated_data %>% select(treatment, activity) %>% filter(treatment == "CO2")
# play around the t-test
permuted_t_test_results <- t.test(control, CO2,var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(0,n_reps)
### run our loop and set in loop
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(treatment = treatment[sample(row_number())])
control <- permutated_data %>% select(treatment, activity) %>% filter(treatment == "control")
CO2 <- permutated_data %>% select(treatment, activity) %>% filter(treatment == "CO2")
# play around the t-test
permuted_t_test_results <- t.test(control, CO2,var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
View(control)
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(0,n_reps)
### run our loop and set in loop
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(treatment = treatment[sample(row_number())])
con <- permutated_data %>% select(treatment, activity) %>% filter(treatment == "control")
CO2 <- permutated_data %>% select(treatment, activity) %>% filter(treatment == "CO2")
# play around the t-test
permuted_t_test_results <- t.test(con, CO2,var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(treatment = treatment[sample(row_number())])
con <- permuted_data %>% select(treatment, activity) %>% filter(treatment == "control")
CO2 <- permuted_data %>% select(treatment, activity) %>% filter(treatment == "CO2")
# play around the t-test
permuted_t_test_results <- t.test(con, CO2,var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
## generate t-test
### loop how many times?
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(0,n_reps)
### run our loop and set in loop
n_reps <- 10000
# Create a vector/list to store the result
samp_dist <- rep(1,n_reps)
# Set a loop that sums the number of reps
for (i in 1:n_reps)
{
# Random assignment to treatment
permuted_data <- data7 %>% mutate(treatment = treatment[sample(row_number())])
# The results of t-test
permuted_test <- t.test(permuted_data$activity[which(permuted_data$treatment=="CO2")],permuted_data$activity[which(permuted_data$treatment=="control")])
# Loop and sum the results of t-test statistic
samp_dist[i] <- permuted_test$statistic
}
## generate t-test
### run our loop and set in loop
n_reps <- 100
# Create a vector/list to store the result
samp_dist <- rep(1,n_reps)
# Set a loop that sums the number of reps
for (i in 1:n_reps)
{
# Random assignment to treatment
permuted_data <- data7 %>% mutate(treatment = treatment[sample(row_number())])
# The results of t-test
permuted_test <- t.test(permuted_data$activity[which(permuted_data$treatment=="CO2")],permuted_data$activity[which(permuted_data$treatment=="control")])
# Loop and sum the results of t-test statistic
samp_dist[i] <- permuted_test$statistic
}
# Set a tibble of extreme fraction
t_test_statistic <- test4$statistic
plot_tibble <- tibble(value = samp_dist,extreme = (abs(samp_dist) > abs(t_test_statistic)))
# Draw a histogram
ggplot(plot_tibble,aes(x=value,fill=extreme))+geom_histogram(bins=200)
# Set a tibble of extreme fraction
t_test_statistic <- test5$statistic
plot_tibble <- tibble(value = samp_dist,extreme = (abs(samp_dist) > abs(t_test_statistic)))
# Draw a histogram
ggplot(plot_tibble,aes(x=value,fill=extreme))+geom_histogram(bins=200)
# Add your code here.
## permutate lemon
permutate_lemon <- data7
permutate_lemon$treatment <- permutate_lemon$treatment[sample(length(data7$treatment))]
head(permutate_lemon)
## generate t-test
### run our loop and set in loop
n_reps <- 10000
### Create a vector/list to store the result
samp_dist <- rep(1,n_reps)
###Set a loop that sums the number of reps
for (i in 1:n_reps)
{
# Random assignment to treatment
permuted_data <- data7 %>% mutate(treatment = treatment[sample(row_number())])
# The results of t-test
permuted_test <- t.test(permuted_data$activity[which(permuted_data$treatment=="CO2")],permuted_data$activity[which(permuted_data$treatment=="control")])
### Loop and sum the results of t-test statistic
samp_dist[i] <- permuted_test$statistic
}
### Set a tibble of extreme fraction
t_test_statistic <- test5$statistic
plot_tibble <- tibble(value = samp_dist,extreme = (abs(samp_dist) > abs(t_test_statistic)))
### Draw a histogram
ggplot(plot_tibble,aes(x=value,fill=extreme))+geom_histogram(bins=200)
permutation_pvalue <- permuted_t_test_results$p.value
permutation_pvalue <- sum(plot_tibble$extreme)/n_reps
tibble(permutation_pvalue,t_test_results$p.value)
permutation_pvalue <- sum(plot_tibble$extreme)/n_reps
tibble(permutation_pvalue,t_test_results)
permutation_pvalue <- sum(plot_tibble$extreme)/n_reps
tibble(permutation_pvalue,test7$p.value)
tibble(permutation_pvalue,test5$p.value)
test1$null.value
View(test1)
View(test2)
test1$estimate
ads(max(test1$estimate)-min(test1$estimate))
abs(max(test1$estimate)-min(test1$estimate))
species <- c("acantho", "ambon", "chromis", "humbug", "lemon", "whitedams")
p.value <- c(test1$p.value, test2$p.value, test3$p.value, test4$p.value, test5$p.value, test6$p.value)
df <- c(test1$parameter, test2$parameter, test3$parameter, test4$parameter, test5$parameter, test6$parameter)
t.statistic <- c(test1$statistic, test2$statistic, test3$statistic, test4$statistic, test5$statistic, test6$statistic)
confi1 <- c(min(test1$conf.int), min(test2$conf.int), min(test3$conf.int), min(test4$conf.int), min(test5$conf.int), min(test6$conf.int))
confi2<- c(max(test1$conf.int), max(test2$conf.int), max(test3$conf.int), max(test4$conf.int), max(test5$conf.int), max(test6$conf.int))
difference.in.means <- c(abs(max(test1$estimate)-min(test1$estimate)), abs(max(test2$estimate)-min(test2$estimate)), abs(max(test3$estimate)-min(test3$estimate)), abs(max(test4$estimate)-min(test4$estimate)), abs(max(test5$estimate)-min(test5$estimate)), abs(max(test6$estimate)-min(test6$estimate)))
result <- data.frame(species, p.value, df, t.statistic, confi1, confi2, difference.in.means)
View(result)
