permuted_t_test_results <- t.test(permuted_data$activiy[which(permuted_data$treatment=="control")],permuted_data$activity[which(permuted_data$treatment=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
argument is not numeric or logical: returning NAError in var(x) : 'x' is NULL
permuted_data$activiy[which(permuted_data$treatment=="control")
permuted_data$activiy[which(permuted_data$treatment=="control")
View(permutate_lemon)
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- permutate_lemon$treatment[sample(length(data7$treatment))]
# play around the t-test
permuted_t_test_results <- t.test(permuted_data$activiy[which(permuted_data$treatment=="control")],permuted_data$activity[which(permuted_data$treatment=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permutate_lemon$treatment <- permutate_lemon$treatment[sample(length(data7$treatment))]
# play around the t-test
permuted_t_test_results <- t.test(permuted_data$activiy[which(permuted_data$treatment=="control")],permuted_data$activity[which(permuted_data$treatment=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
## generate t-test
### loop how many times?
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(0,n_reps)
### run our loop and set in loop
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permutate_lemon$treatment <- permutate_lemon$treatment[sample(length(data7$treatment))]
# play around the t-test
permuted_t_test_results <- t.test(permutate_lemon$activiy[which(permutate_lemon$treatment=="control")],permutate_lemon$activity[which(permutate_lemon$treatment=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(0,n_reps)
### run our loop and set in loop
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(permutate_lemon$treatment[sample(length(data7$treatment))])
head(permutate_lemon)
# play around the t-test
permuted_t_test_results <- t.test(permutate_lemon$activiy[which(permutate_lemon$treatment=="control")],permutate_lemon$activity[which(permutate_lemon$treatment=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
permuted_data <- data7 %>% mutate(treatment[sample(row_number())])
head(permutate_lemon)
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(treatment[sample(row_number())])
head(permutate_lemon)
# play around the t-test
permuted_t_test_results <- t.test(permutate_lemon$activiy[which(permutate_lemon$treatment=="control")],permutate_lemon$activity[which(permutate_lemon$treatment=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
# generate t-test
### loop how many times?
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(1,n_reps)
### run our loop and set in loop
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(treatment[sample(row_number())])
head(permutate_lemon)
# play around the t-test
permuted_t_test_results <- t.test(permutate_lemon$activiy[which(permutate_lemon$treatment=="control")],permutate_lemon$activity[which(permutate_lemon$treatment=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(1,n_reps)
### run our loop and set in loop
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(treatment = treatment[sample(row_number())])
head(permutate_lemon)
# play around the t-test
permuted_t_test_results <- t.test(permutate_lemon$activiy[which(permutate_lemon$treatment=="control")],permutate_lemon$activity[which(permutate_lemon$treatment=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
View(permuted_data)
## generate t-test
### loop how many times?
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(1,n_reps)
### run our loop and set in loop
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(treatment = treatment[sample(length(data7$treatment)])
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(1,n_reps)
### run our loop and set in loop
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(treatment = treatment[sample(length(data7$treatment))])
# play around the t-test
permuted_t_test_results <- t.test(permutate_lemon$activiy[which(permutate_lemon$treatment=="control")],permutate_lemon$activity[which(permutate_lemon$treatment=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
## generate t-test
### loop how many times?
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(1,n_reps)
### run our loop and set in loop
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(treatment = treatment[sample(length(data7$treatment))])
# play around the t-test
permuted_t_test_results <- t.test(permutate_lemon$activiy[which(permutate_lemon$treatment=="control")],permutate_lemon$activity[which(permutate_lemon$treatment=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
### loop how many times?
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(1,n_reps)
### run our loop and set in loop
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(treatment = treatment[sample(row_number())])
# play around the t-test
permuted_t_test_results <- t.test(permutate_data$activiy[which(permutate_data$treatment=="control")],permutate_data$activity[which(permutate_data$treatment=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(1,n_reps)
### run our loop and set in loop
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(treatment = treatment[sample(row_number())])
# play around the t-test
permuted_t_test_results <- t.test(permuted_data$activiy[which(permuted_data$treatment=="control")],permuted_data$activity[which(permuted_data$treatment=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
View(permuted_data)
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(0,n_reps)
### run our loop and set in loop
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(treatment = treatment[sample(row_number())])
# play around the t-test
permuted_t_test_results <- t.test(permuted_data$activiy[which(permuted_data$treatment=="control")],permuted_data$activity[which(permuted_data$treatment=="CO2")],var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(treatment = treatment[sample(row_number())])
control <- permutated_data %>% select(treatment, activity) %>% filter(treatment == "control")
CO2 <- permutated_data %>% select(treatment, activity) %>% filter(treatment == "CO2")
# play around the t-test
permuted_t_test_results <- t.test(control, CO2],var.equal=T)
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(treatment = treatment[sample(row_number())])
control <- permutated_data %>% select(treatment, activity) %>% filter(treatment == "control")
CO2 <- permutated_data %>% select(treatment, activity) %>% filter(treatment == "CO2")
# play around the t-test
permuted_t_test_results <- t.test(control, CO2,var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(0,n_reps)
### run our loop and set in loop
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(treatment = treatment[sample(row_number())])
control <- permutated_data %>% select(treatment, activity) %>% filter(treatment == "control")
CO2 <- permutated_data %>% select(treatment, activity) %>% filter(treatment == "CO2")
# play around the t-test
permuted_t_test_results <- t.test(control, CO2,var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
View(control)
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(0,n_reps)
### run our loop and set in loop
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(treatment = treatment[sample(row_number())])
con <- permutated_data %>% select(treatment, activity) %>% filter(treatment == "control")
CO2 <- permutated_data %>% select(treatment, activity) %>% filter(treatment == "CO2")
# play around the t-test
permuted_t_test_results <- t.test(con, CO2,var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
for (i in 1:n_reps)
{
# choose some data and randomise the ID
permuted_data <- data7 %>% mutate(treatment = treatment[sample(row_number())])
con <- permuted_data %>% select(treatment, activity) %>% filter(treatment == "control")
CO2 <- permuted_data %>% select(treatment, activity) %>% filter(treatment == "CO2")
# play around the t-test
permuted_t_test_results <- t.test(con, CO2,var.equal=T)
# fill in the blank box
samp_dist[i] <- permuted_t_test_results$statistic
}
## generate t-test
### loop how many times?
n_reps <- 100
### set up a new blank box for loop
samp_dist <- rep(0,n_reps)
### run our loop and set in loop
n_reps <- 10000
# Create a vector/list to store the result
samp_dist <- rep(1,n_reps)
# Set a loop that sums the number of reps
for (i in 1:n_reps)
{
# Random assignment to treatment
permuted_data <- data7 %>% mutate(treatment = treatment[sample(row_number())])
# The results of t-test
permuted_test <- t.test(permuted_data$activity[which(permuted_data$treatment=="CO2")],permuted_data$activity[which(permuted_data$treatment=="control")])
# Loop and sum the results of t-test statistic
samp_dist[i] <- permuted_test$statistic
}
## generate t-test
### run our loop and set in loop
n_reps <- 100
# Create a vector/list to store the result
samp_dist <- rep(1,n_reps)
# Set a loop that sums the number of reps
for (i in 1:n_reps)
{
# Random assignment to treatment
permuted_data <- data7 %>% mutate(treatment = treatment[sample(row_number())])
# The results of t-test
permuted_test <- t.test(permuted_data$activity[which(permuted_data$treatment=="CO2")],permuted_data$activity[which(permuted_data$treatment=="control")])
# Loop and sum the results of t-test statistic
samp_dist[i] <- permuted_test$statistic
}
# Set a tibble of extreme fraction
t_test_statistic <- test4$statistic
plot_tibble <- tibble(value = samp_dist,extreme = (abs(samp_dist) > abs(t_test_statistic)))
# Draw a histogram
ggplot(plot_tibble,aes(x=value,fill=extreme))+geom_histogram(bins=200)
# Set a tibble of extreme fraction
t_test_statistic <- test5$statistic
plot_tibble <- tibble(value = samp_dist,extreme = (abs(samp_dist) > abs(t_test_statistic)))
# Draw a histogram
ggplot(plot_tibble,aes(x=value,fill=extreme))+geom_histogram(bins=200)
# Add your code here.
## permutate lemon
permutate_lemon <- data7
permutate_lemon$treatment <- permutate_lemon$treatment[sample(length(data7$treatment))]
head(permutate_lemon)
## generate t-test
### run our loop and set in loop
n_reps <- 10000
### Create a vector/list to store the result
samp_dist <- rep(1,n_reps)
###Set a loop that sums the number of reps
for (i in 1:n_reps)
{
# Random assignment to treatment
permuted_data <- data7 %>% mutate(treatment = treatment[sample(row_number())])
# The results of t-test
permuted_test <- t.test(permuted_data$activity[which(permuted_data$treatment=="CO2")],permuted_data$activity[which(permuted_data$treatment=="control")])
### Loop and sum the results of t-test statistic
samp_dist[i] <- permuted_test$statistic
}
### Set a tibble of extreme fraction
t_test_statistic <- test5$statistic
plot_tibble <- tibble(value = samp_dist,extreme = (abs(samp_dist) > abs(t_test_statistic)))
### Draw a histogram
ggplot(plot_tibble,aes(x=value,fill=extreme))+geom_histogram(bins=200)
permutation_pvalue <- permuted_t_test_results$p.value
permutation_pvalue <- sum(plot_tibble$extreme)/n_reps
tibble(permutation_pvalue,t_test_results$p.value)
permutation_pvalue <- sum(plot_tibble$extreme)/n_reps
tibble(permutation_pvalue,t_test_results)
permutation_pvalue <- sum(plot_tibble$extreme)/n_reps
tibble(permutation_pvalue,test7$p.value)
tibble(permutation_pvalue,test5$p.value)
test1$null.value
View(test1)
View(test2)
test1$estimate
ads(max(test1$estimate)-min(test1$estimate))
abs(max(test1$estimate)-min(test1$estimate))
species <- c("acantho", "ambon", "chromis", "humbug", "lemon", "whitedams")
p.value <- c(test1$p.value, test2$p.value, test3$p.value, test4$p.value, test5$p.value, test6$p.value)
df <- c(test1$parameter, test2$parameter, test3$parameter, test4$parameter, test5$parameter, test6$parameter)
t.statistic <- c(test1$statistic, test2$statistic, test3$statistic, test4$statistic, test5$statistic, test6$statistic)
confi1 <- c(min(test1$conf.int), min(test2$conf.int), min(test3$conf.int), min(test4$conf.int), min(test5$conf.int), min(test6$conf.int))
confi2<- c(max(test1$conf.int), max(test2$conf.int), max(test3$conf.int), max(test4$conf.int), max(test5$conf.int), max(test6$conf.int))
difference.in.means <- c(abs(max(test1$estimate)-min(test1$estimate)), abs(max(test2$estimate)-min(test2$estimate)), abs(max(test3$estimate)-min(test3$estimate)), abs(max(test4$estimate)-min(test4$estimate)), abs(max(test5$estimate)-min(test5$estimate)), abs(max(test6$estimate)-min(test6$estimate)))
result <- data.frame(species, p.value, df, t.statistic, confi1, confi2, difference.in.means)
View(result)
# Install a load of packages that we'll use. I'll show you a shortcut that I love to use. Try using the p_load function in the "pacman" package. p_load will execute both the install.packages and library commands in one shot so they only need to be used once to install pacman itself.
install.packages("pacman", repos = "http://cran.us.r-project.org")
# You want to make changes to your collaborators figure in Task 5. Maybe you want to create a figure that focuses only on three fish species instead of the 5. More specifically, chromis, lemon, and acantho. Add code here to revise their figure to do that.
data3 <- data2 %>% filter(species == c("chromis", "lemon", "acantho"))
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
getwd()
path <- "./data/OA_activitydat_20190302_BIOL3207.csv"
data <- read.csv(path)
library(tidyverse)
library(spelling)
library(plotrix)
sum(is.na(data))
complete.cases(data)
# Code to removing missing data from the `OA_activitydat_20190302_BIOL3207.csv` data frame.
data1 <- data %>% filter(!(is.na(activity))) %>% filter(!(is.na(animal_id)))
# Drop irrelevant columns
data2 <- data1 %>% select(species, treatment, animal_id, activity)
# Check spelling in species and treatment but also generate a summary table
data2_1 <- data2 %>% filter(!species == "whitedams")
spell_check_files("./data/OA_activitydat_20190302_BIOL3207.csv", lang = "en_US")
data2 %>% count(species)
mean <- aggregate(x = data2$activity,by=list(species = data2$species), mean)
colnames(mean) <- c("species","mean")
std.error <- aggregate(x = data2$activity,by=list(sepcies = data2$species), std.error)
colnames(std.error) <- c("species","std.error")
tab1 <- merge(x = mean, y = std.error)
control <- data2 %>% filter(treatment == "control") %>% count(species)
colnames(control) <- c("species","control")
treated <- data2 %>% filter(treatment == "CO2") %>% count(species)
colnames(treated) <- c("species","treated")
tab2 <- merge(x = control, y = treated)
tab <- merge(x = tab1, y = tab2)
# Use flextable to render the summary table in a tidy format
ft <- flextable(tab)
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
ggplot(data2, aes(x = treatment, y = activity, color = treatment)) + geom_boxplot() + facet_wrap(~species)
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
pics1 <- readPNG("./pics/acantho.png")
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
library(PNG)
library(tidyverse)
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
library(tidyverse)
pics1 <- readPNG("./pics/acantho.png")
# You want to make changes to your collaborators figure in Task 5. Maybe you want to create a figure that focuses only on three fish species instead of the 5. More specifically, chromis, lemon, and acantho. Add code here to revise their figure to do that.
data3 <- data2 %>% filter(species == c("chromis", "lemon", "acantho"))
ggplot(data3, aes(x = treatment, y = activity, color = treatment)) + geom_boxplot() + labs(title = "collab_Fig") + facet_wrap(~species)
# acantho
data3 <- data2 %>% filter(species == 'acantho')
data3c <- data3 %>% filter(treatment == "control")
data3t <- data3 %>% filter(treatment == "CO2")
test1 <- t.test(data3c$activity, data3t$activity)
print(test1)
#ambon
data4 <- data2 %>% filter(species == 'ambon')
data4c <- data4 %>% filter(treatment == "control")
data4t <- data4 %>% filter(treatment == "CO2")
test2 <- t.test(data4c$activity, data4t$activity)
print(test2)
#chromis
data5 <- data2 %>% filter(species == 'chromis')
data5c <- data5 %>% filter(treatment == "control")
data5t <- data5 %>% filter(treatment == "CO2")
test3 <- t.test(data5c$activity, data5t$activity)
print(test3)
#humbug
data6 <- data2 %>% filter(species == 'humbug')
data6c <- data6 %>% filter(treatment == "control")
data6t <- data6 %>% filter(treatment == "CO2")
test4 <- t.test(data6c$activity, data6t$activity)
print(test4)
#lemon
data7 <- data2 %>% filter(species == 'lemon')
data7c <- data7 %>% filter(treatment == "control")
data7t <- data7 %>% filter(treatment == "CO2")
test5 <- t.test(data7c$activity, data7t$activity)
print(test5)
#whitedams
data8 <- data2 %>% filter(species == 'whitedams')
data8c <- data8%>% filter(treatment == "control")
data8t <- data8 %>% filter(treatment == "CO2")
test6 <- t.test(data8c$activity, data8t$activity)
print(test6)
View(test5)
View(test5)
Mean activity for `r "lemon"` in the control group was `r "test5$estimate[mean of x]"` (s / min) compared to the OA treatment group, which was `r "test5$estimate[mean of y]"` (s / min). The difference between control and OA treatment means was `r "(test5$estimate[mean of y]-test5$estimate[mean of x])"` (s / min) (95% CI: `r "min(test5$conf.int)"` to `r "max(test5$conf.int)"`).
# You want to make changes to your collaborators figure in Task 5. Maybe you want to create a figure that focuses only on three fish species instead of the 5. More specifically, chromis, lemon, and acantho. Add code here to revise their figure to do that.
data3 <- data2 %>% filter(species == c("chromis", "lemon", "acantho"))
ggplot(data3, aes(x = treatment, y = activity, color = treatment)) + geom_boxplot() + labs(title = "collab_Fig") + facet_wrap(~species)
# acantho
data3 <- data2 %>% filter(species == 'acantho')
data3c <- data3 %>% filter(treatment == "control")
data3t <- data3 %>% filter(treatment == "CO2")
test1 <- t.test(data3c$activity, data3t$activity)
print(test1)
#ambon
data4 <- data2 %>% filter(species == 'ambon')
data4c <- data4 %>% filter(treatment == "control")
data4t <- data4 %>% filter(treatment == "CO2")
test2 <- t.test(data4c$activity, data4t$activity)
print(test2)
#chromis
data5 <- data2 %>% filter(species == 'chromis')
data5c <- data5 %>% filter(treatment == "control")
data5t <- data5 %>% filter(treatment == "CO2")
test3 <- t.test(data5c$activity, data5t$activity)
print(test3)
#humbug
data6 <- data2 %>% filter(species == 'humbug')
data6c <- data6 %>% filter(treatment == "control")
data6t <- data6 %>% filter(treatment == "CO2")
test4 <- t.test(data6c$activity, data6t$activity)
print(test4)
#lemon
data7 <- data2 %>% filter(species == 'lemon')
data7c <- data7 %>% filter(treatment == "control")
data7t <- data7 %>% filter(treatment == "CO2")
test5 <- t.test(data7c$activity, data7t$activity)
print(test5)
#whitedams
data8 <- data2 %>% filter(species == 'whitedams')
data8c <- data8%>% filter(treatment == "control")
data8t <- data8 %>% filter(treatment == "CO2")
test6 <- t.test(data8c$activity, data8t$activity)
print(test6)
# Using the resulting object created above, which should be a table with all the summary statistics, t, df and p-value for each species create a table. Note that there is a tab.cap argument in the chunk arguments. Write a caption here.
species <- c("acantho", "ambon", "chromis", "humbug", "lemon", "whitedams")
p.value <- c(test1$p.value, test2$p.value, test3$p.value, test4$p.value, test5$p.value, test6$p.value)
df <- c(test1$parameter, test2$parameter, test3$parameter, test4$parameter, test5$parameter, test6$parameter)
t.statistic <- c(test1$statistic, test2$statistic, test3$statistic, test4$statistic, test5$statistic, test6$statistic)
confi1 <- c(min(test1$conf.int), min(test2$conf.int), min(test3$conf.int), min(test4$conf.int), min(test5$conf.int), min(test6$conf.int))
confi2<- c(max(test1$conf.int), max(test2$conf.int), max(test3$conf.int), max(test4$conf.int), max(test5$conf.int), max(test6$conf.int))
difference.in.means <- c(abs(max(test1$estimate)-min(test1$estimate)), abs(max(test2$estimate)-min(test2$estimate)), abs(max(test3$estimate)-min(test3$estimate)), abs(max(test4$estimate)-min(test4$estimate)), abs(max(test5$estimate)-min(test5$estimate)), abs(max(test6$estimate)-min(test6$estimate)))
result <- data.frame(species, p.value, df, t.statistic, confi1, confi2, difference.in.means)
##ps: confi1 ~ confi2 is the 95% confidence interval
permutation_pvalue <- sum(plot_tibble$extreme)/n_reps
library(PNG)
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
install.packages(PNG)
install.packages("PNG")
install.packages("png")
library(PNG)
install.packages("png")
library(png)
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
install.packages("png")
library(png)
pics1 <- readPNG("./pics/acantho.png")
pics2 <- readPNG("./pics/ambon.png")
pics3 <- readPNG("./pics/chromis.png")
pics4 <- readPNG("./pics/humbug.png")
pics5 <- readPNG("./pics/lemon.png")
pics6 <- readPNG("./pics/whitedams.png")
ggplot(data2, aes(x = species, y = activity, color = treatment)) + geom_boxplot() + geom_jitter() + annotation_raster(pics1, 0.5, 1.5, 5, 15, interpolate = FALSE) + annotation_raster(pics2, 1.5, 2.5, 45, 55, interpolate = FALSE) + annotation_raster(pics3, 2.5, 3.5, 46, 56, interpolate = FALSE) + annotation_raster(pics4, 3.5, 4.5, 5, 15, interpolate = FALSE) + annotation_raster(pics5, 4.5, 5.5, 3, 13, interpolate = FALSE) + annotation_raster(pics6, 5.5, 6.5, 3, 13, interpolate = FALSE)
install.packages("png")
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
pics1 <- readPNG("./pics/acantho.png")
# You want to make changes to your collaborators figure in Task 5. Maybe you want to create a figure that focuses only on three fish species instead of the 5. More specifically, chromis, lemon, and acantho. Add code here to revise their figure to do that.
data3 <- data2 %>% filter(species == c("chromis", "lemon", "acantho"))
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
library(pacman)
getwd()
library(tidyverse)
library(spelling)
library(plotrix)
# Code to removing missing data from the `OA_activitydat_20190302_BIOL3207.csv` data frame.
data1 <- data %>% filter(!(is.na(activity))) %>% filter(!(is.na(animal_id)))
library(tidyverse)
library(spelling)
library(plotrix)
# Code to removing missing data from the `OA_activitydat_20190302_BIOL3207.csv` data frame.
data1 <- data %>% filter(!(is.na(activity))) %>% filter(!(is.na(animal_id)))
# Code to removing missing data from the `OA_activitydat_20190302_BIOL3207.csv` data frame.
data1 <- data %>% filter(!(is.na(activity))) %>% filter(!(is.na(animal_id)))
library(tidyverse)
library(spelling)
library(plotrix)
# Code to removing missing data from the `OA_activitydat_20190302_BIOL3207.csv` data frame.
data1 <- data %>% filter(!(is.na(activity))) %>% filter(!(is.na(animal_id)))
